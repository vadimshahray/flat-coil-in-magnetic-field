{"version":3,"file":"static/js/867.17cf65d0.chunk.js","mappings":"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","sources":["models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGrid.tsx","../node_modules/@react-three/drei/core/CubicBezierLine.js","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGraphic.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveform.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeDisplay.tsx","models/Oscilloscope/Oscilloscope.tsx"],"sourcesContent":["import React from 'react'\r\nimport { useTranslate } from '@languages'\r\nimport { Line, Text } from '@react-three/drei'\r\nimport { GRID_CELLS_COUNT_IN_QUARTER } from '@constants'\r\nimport Roboto from 'src/assets/fonts/roboto_regular.woff'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\n\r\nconst gridLines = new Array(GRID_CELLS_COUNT_IN_QUARTER * 2).fill(0)\r\n\r\nexport const OscilloscopeWaveformGrid = ({ size }: Props) => {\r\n  const translate = useTranslate('OscilloscopeWaveformSI')\r\n\r\n  const cellSize = size / GRID_CELLS_COUNT_IN_QUARTER / 2\r\n\r\n  const renderLineH = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2, size / 2 - cellSize * i, 0],\r\n        [size / 2, size / 2 - cellSize * i, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={0.4}\r\n      lineWidth={0.4}\r\n      color='red'\r\n    />\r\n  )\r\n  const renderLineV = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2 + cellSize * i, size / 2, 0],\r\n        [-size / 2 + cellSize * i, -size / 2, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={0.4}\r\n      lineWidth={0.4}\r\n      color='red'\r\n    />\r\n  )\r\n\r\n  return (\r\n    <group>\r\n      {gridLines.map(renderLineH)}\r\n\r\n      {gridLines.map(renderLineV)}\r\n\r\n      <Text\r\n        fontSize={2.5}\r\n        font={Roboto}\r\n        color='red'\r\n        position={[4, size / 2 - 3, 1]}\r\n      >\r\n        {`U, ${translate('y')}`}\r\n      </Text>\r\n\r\n      <Text\r\n        fontSize={2.5}\r\n        font={Roboto}\r\n        color='red'\r\n        position={[size / 2 - 3, -2, 1]}\r\n      >\r\n        {`t, ${translate('x')}`}\r\n      </Text>\r\n    </group>\r\n  )\r\n}\r\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CubicBezierCurve3 } from 'three';\nimport { Line } from './Line.js';\n\nconst CubicBezierLine = /*#__PURE__*/React.forwardRef(function CubicBezierLine({\n  start,\n  end,\n  midA,\n  midB,\n  segments = 20,\n  ...rest\n}, ref) {\n  const points = React.useMemo(() => {\n    const startV = start instanceof Vector3 ? start : new Vector3(...start);\n    const endV = end instanceof Vector3 ? end : new Vector3(...end);\n    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);\n    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);\n    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);\n    return interpolatedV;\n  }, [start, end, midA, midB, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: points\n  }, rest));\n});\n\nexport { CubicBezierLine };\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { CubicBezierLine } from '@react-three/drei'\r\nimport {\r\n  GRID_CELLS_COUNT_IN_QUARTER,\r\n  ENGINE_ROTATION_FREQUENCY_MIN,\r\n} from '@constants'\r\nimport {\r\n  selectModelingVoltageMax,\r\n  selectEngineRotationFrequency,\r\n  selectIsOscilloscopeConnected,\r\n} from '@selectors'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\nconst T_MAX = 1 / ENGINE_ROTATION_FREQUENCY_MIN\r\n\r\nconst T_MAX_SIZE = T_MAX * GRID_CELLS_COUNT_IN_QUARTER\r\n\r\nexport const OscilloscopeWaveformGraphic = ({ size }: Props) => {\r\n  const isConnected = useSelector(selectIsOscilloscopeConnected)\r\n\r\n  const V = useSelector(selectModelingVoltageMax)\r\n  const T = 1 / useSelector(selectEngineRotationFrequency)\r\n\r\n  if (!isConnected) return null\r\n\r\n  const TSize = (T / T_MAX_SIZE) * size\r\n  const oscillationsInQuarter = new Array(Math.round(size / 2 / TSize)).fill(0)\r\n\r\n  const renderOscillation = (_: any, i: number) => {\r\n    const sign = i % 2 ? -1 : 1\r\n\r\n    return (\r\n      <>\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[i * TSize, 0, 0]}\r\n          midA={[i * TSize + TSize / 2, sign * V, 0]}\r\n          midB={[i * TSize + TSize / 2, sign * V, 0]}\r\n          end={[i * TSize + TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[-i * TSize, 0, 0]}\r\n          midA={[-i * TSize - TSize / 2, -sign * V, 0]}\r\n          midB={[-i * TSize - TSize / 2, -sign * V, 0]}\r\n          end={[-i * TSize - TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <group>{oscillationsInQuarter.map(renderOscillation)}</group>\r\n}\r\n","import React from 'react'\r\nimport { Line } from '@react-three/drei'\r\nimport { OscilloscopeWaveformGrid } from './OscilloscopeWaveformGrid'\r\nimport { OscilloscopeWaveformGraphic } from './OscilloscopeWaveformGraphic'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  size: number\r\n}\r\n\r\nexport const OscilloscopeWaveform = ({ size, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      {/** Рамка */}\r\n      <Line\r\n        points={[\r\n          [-size / 2, size / 2, 0],\r\n          [size / 2, size / 2, 0],\r\n          [size / 2, -size / 2, 0],\r\n          [-size / 2, -size / 2, 0],\r\n          [-size / 2, size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось Y */}\r\n      <Line\r\n        points={[\r\n          [0, size / 2, 0],\r\n          [0, -size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось X */}\r\n      <Line\r\n        points={[\r\n          [size / 2, 0, 0],\r\n          [-size / 2, 0, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <OscilloscopeWaveformGrid size={size} />\r\n\r\n      <OscilloscopeWaveformGraphic size={size} />\r\n    </group>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { OscilloscopeWaveform } from './OscilloscopeWaveform'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const OscilloscopeDisplay = ({ width, height, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      <mesh>\r\n        <boxGeometry args={[width, height, 1]} />\r\n        <meshBasicMaterial color='red' transparent opacity={0.15} />\r\n      </mesh>\r\n\r\n      <OscilloscopeWaveform size={height - 10} position={[-40, 0, 0]} />\r\n    </group>\r\n  )\r\n}\r\n","import * as THREE from 'three'\nimport { GLTF } from 'three-stdlib'\nimport { useDispatch } from '@hooks'\nimport React, { useRef } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useGLTF } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport { TerminalConnectingZone } from '@components'\nimport OscilloscopeModelPath from './oscilloscope.glb'\nimport { setOscilloscopeIsPowerSupplied } from '@slices'\nimport { OscilloscopeDisplay } from './OscilloscopeDisplay'\nimport { setDefaultCursor, setPointerCursor } from '@utils'\nimport { selectOscilloscopeIsPowerSupplied } from '@selectors'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Cylinder: THREE.Mesh\n    Cylinder_1: THREE.Mesh\n    power: THREE.Mesh\n    Text001: THREE.Mesh\n    Text001_1: THREE.Mesh\n    Text001_2: THREE.Mesh\n    Text001_3: THREE.Mesh\n    ['-']: THREE.Mesh\n    ['+']: THREE.Mesh\n  }\n  materials: {\n    tabl_background: THREE.MeshStandardMaterial\n    Black_line: THREE.MeshStandardMaterial\n    power: THREE.MeshStandardMaterial\n    Corp: THREE.MeshStandardMaterial\n    blue: THREE.MeshStandardMaterial\n    metall: THREE.MeshPhysicalMaterial\n    very_blue: THREE.MeshStandardMaterial\n  }\n}\n\nconst powerBtnZ = 77.13\n\nconst Oscilloscope = (props: JSX.IntrinsicElements['group']) => {\n  const dispatch = useDispatch()\n\n  const { nodes, materials } = useGLTF(OscilloscopeModelPath) as GLTFResult\n\n  const powerBtnRef = useRef<THREE.Mesh>(null)\n\n  const isPowerSupplied = useSelector(selectOscilloscopeIsPowerSupplied)\n\n  const handlePowerClick = () => {\n    dispatch(setOscilloscopeIsPowerSupplied(!isPowerSupplied))\n\n    if (!powerBtnRef.current) return\n    powerBtnRef.current.position.z += isPowerSupplied ? 6 : -6\n  }\n\n  useFrame(() => {\n    if (!powerBtnRef.current) return\n\n    powerBtnRef.current.position.setZ(powerBtnZ - (isPowerSupplied ? 6 : 0))\n  })\n\n  return (\n    <group {...props} dispose={null}>\n      <group position={[0, -110, 0]}>\n        <group\n          position={[87.01, 34.15, 81.41]}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[-12.81, -6.02, -12.81]}\n        >\n          <mesh\n            geometry={nodes.Cylinder.geometry}\n            material={materials.tabl_background}\n          />\n          <mesh\n            geometry={nodes.Cylinder_1.geometry}\n            material={materials.Black_line}\n          />\n        </group>\n\n        <mesh\n          ref={powerBtnRef}\n          geometry={nodes.power.geometry}\n          material={materials.power}\n          position={[-92.84, 32, 77.13]}\n          rotation={[0, -Math.PI / 2, 0]}\n          scale={[3.92, 5.58, 5.58]}\n          onClick={handlePowerClick}\n          onPointerOver={setPointerCursor}\n          onPointerLeave={setDefaultCursor}\n        />\n\n        <group\n          position={[87.01, 13.75, 74.96]}\n          rotation={[Math.PI / 2, 0, 0]}\n          scale={[6.64, 144.05, 6.64]}\n        >\n          <mesh\n            geometry={nodes.Text001.geometry}\n            material={materials.Black_line}\n          />\n          <mesh geometry={nodes.Text001_1.geometry} material={materials.Corp} />\n          <mesh geometry={nodes.Text001_2.geometry} material={materials.blue} />\n          <mesh\n            geometry={nodes.Text001_3.geometry}\n            material={materials.metall}\n          />\n        </group>\n\n        <mesh\n          geometry={nodes['-'].geometry}\n          material={materials.very_blue}\n          position={[12.23, 32, 77.13]}\n          rotation={[0, -Math.PI / 2, 0]}\n          scale={[3.92, 5.58, 5.58]}\n        />\n\n        <mesh\n          geometry={nodes['+'].geometry}\n          material={materials.very_blue}\n          position={[45.04, 32, 77.13]}\n          rotation={[0, -Math.PI / 2, 0]}\n          scale={[3.92, 5.58, 5.58]}\n        />\n\n        <TerminalConnectingZone\n          terminal='Oscilloscope+'\n          color='black'\n          size={16}\n          position={[-28, 32, 83.5]}\n        />\n\n        <TerminalConnectingZone\n          terminal='Oscilloscope-'\n          color='black'\n          size={16}\n          position={[-56, 32, 83.5]}\n        />\n\n        <OscilloscopeDisplay\n          width={200}\n          height={120}\n          visible={isPowerSupplied}\n          position={[0, 124 / 2 + 54, 74]}\n        />\n      </group>\n    </group>\n  )\n}\n\nexport default Oscilloscope\n"],"names":["gridLines","Array","GRID_CELLS_COUNT_IN_QUARTER","fill","OscilloscopeWaveformGrid","_ref","size","translate","useTranslate","cellSize","_jsxs","children","map","_","i","_jsx","Line","points","dashed","dashSize","lineWidth","color","Text","fontSize","font","Roboto","position","concat","CubicBezierLine","React","ref","start","end","midA","midB","_ref$segments","segments","rest","_objectWithoutProperties","_excluded","startV","Vector3","_construct","_toConsumableArray","endV","midAV","midBV","CubicBezierCurve3","getPoints","_extends","T_MAX_SIZE","ENGINE_ROTATION_FREQUENCY_MIN","OscilloscopeWaveformGraphic","isConnected","useSelector","selectIsOscilloscopeConnected","V","selectModelingVoltageMax","T","selectEngineRotationFrequency","TSize","oscillationsInQuarter","Math","round","sign","_Fragment","OscilloscopeWaveform","props","_objectSpread","OscilloscopeDisplay","width","height","args","transparent","opacity","dispatch","useDispatch","useGLTF","OscilloscopeModelPath","nodes","materials","powerBtnRef","useRef","isPowerSupplied","selectOscilloscopeIsPowerSupplied","useFrame","current","setZ","dispose","rotation","PI","scale","geometry","Cylinder","material","tabl_background","Cylinder_1","Black_line","power","onClick","setOscilloscopeIsPowerSupplied","z","onPointerOver","setPointerCursor","onPointerLeave","setDefaultCursor","Text001","Text001_1","Corp","Text001_2","blue","Text001_3","metall","very_blue","TerminalConnectingZone","terminal","visible"],"sourceRoot":""}