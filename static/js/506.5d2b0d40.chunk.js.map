{"version":3,"file":"static/js/506.5d2b0d40.chunk.js","mappings":"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","sources":["models/Oscilloscope/OscilloscopeDisplay/OscilloscopeInfoBar/OscilloscopeInfoBarScaleY.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeInfoBar/OscilloscopeInfoBarScaleX.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeInfoBar/OscilloscopeInfoBarContrast.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeInfoBar/OscilloscopeInfoBar.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGrid.tsx","../node_modules/@react-three/drei/core/CubicBezierLine.js","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGraphic.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveform.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeContrastSurface.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeDisplay.tsx","models/Oscilloscope/Oscilloscope.tsx"],"sourcesContent":["import { store } from 'src/store'\r\nimport React, { useRef } from 'react'\r\nimport { Text } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { selectOscilloscopeScaleY } from '@selectors'\r\nimport FiraCode from 'src/assets/fonts/firacode_light.woff'\r\n\r\nexport const OscilloscopeInfoBarScaleY = (\r\n  props: JSX.IntrinsicElements['group'],\r\n) => {\r\n  const ref = useRef<Text & { text: string }>()\r\n\r\n  useFrame(() => {\r\n    if (!ref.current) return\r\n\r\n    ref.current.text = `${selectOscilloscopeScaleY(store.getState()).toFixed(\r\n      2,\r\n    )} В / ДЕЛ.`\r\n  })\r\n\r\n  return (\r\n    <group {...props}>\r\n      {/* <mesh position={[barWidth / 2, height / 2 - 2.6, 0]}>\r\n        <boxGeometry args={[barWidth, 5, 1]} />\r\n\r\n        <meshStandardMaterial color='red' />\r\n      </mesh> */}\r\n\r\n      <Text\r\n        renderOrder={-1}\r\n        anchorX={15}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        УСИЛ.\r\n      </Text>\r\n\r\n      <Text\r\n        ref={ref}\r\n        renderOrder={-1}\r\n        anchorX={-2.5}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        {''}\r\n      </Text>\r\n    </group>\r\n  )\r\n}\r\n","import { store } from 'src/store'\r\nimport React, { useRef } from 'react'\r\nimport { Text } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { selectOscilloscopeScaleX } from '@selectors'\r\nimport FiraCode from 'src/assets/fonts/firacode_light.woff'\r\n\r\nexport const OscilloscopeInfoBarScaleX = (\r\n  props: JSX.IntrinsicElements['group'],\r\n) => {\r\n  const ref = useRef<Text & { text: string }>()\r\n\r\n  useFrame(() => {\r\n    if (!ref.current) return\r\n\r\n    ref.current.text = `${selectOscilloscopeScaleX(store.getState()).toFixed(\r\n      2,\r\n    )} мс / ДЕЛ.`\r\n  })\r\n\r\n  return (\r\n    <group {...props}>\r\n      {/* <mesh position={[barWidth / 2, height / 2 - 2.6, 0]}>\r\n        <boxGeometry args={[barWidth, 5, 1]} />\r\n\r\n        <meshStandardMaterial color='red' />\r\n      </mesh> */}\r\n\r\n      <Text\r\n        renderOrder={-1}\r\n        anchorX={15}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        ДЛИТ.\r\n      </Text>\r\n\r\n      <Text\r\n        ref={ref}\r\n        renderOrder={-1}\r\n        anchorX={-0.75}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        {''}\r\n      </Text>\r\n    </group>\r\n  )\r\n}\r\n","import { store } from 'src/store'\r\nimport React, { useRef } from 'react'\r\nimport { Text } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { selectOscilloscopeContrast } from '@selectors'\r\nimport FiraCode from 'src/assets/fonts/firacode_light.woff'\r\n\r\nexport const OscilloscopeInfoBarContrast = (\r\n  props: JSX.IntrinsicElements['group'],\r\n) => {\r\n  const ref = useRef<Text & { text: string }>()\r\n\r\n  useFrame(() => {\r\n    if (!ref.current) return\r\n\r\n    ref.current.text = selectOscilloscopeContrast(store.getState()).toFixed(2)\r\n  })\r\n\r\n  return (\r\n    <group {...props}>\r\n      {/* <mesh position={[barWidth / 2, height / 2 - 2.6, 0]}>\r\n        <boxGeometry args={[barWidth, 5, 1]} />\r\n\r\n        <meshStandardMaterial color='red' />\r\n      </mesh> */}\r\n\r\n      <Text\r\n        renderOrder={-1}\r\n        anchorX={15}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        КОНТРАСТ\r\n      </Text>\r\n\r\n      <Text\r\n        ref={ref}\r\n        renderOrder={-1}\r\n        anchorX={-18.8}\r\n        fontSize={3}\r\n        color={'red'}\r\n        font={FiraCode}\r\n      >\r\n        {''}\r\n      </Text>\r\n    </group>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Line } from '@react-three/drei'\r\nimport { OscilloscopeInfoBarScaleY } from './OscilloscopeInfoBarScaleY'\r\nimport { OscilloscopeInfoBarScaleX } from './OscilloscopeInfoBarScaleX'\r\nimport { OscilloscopeInfoBarContrast } from './OscilloscopeInfoBarContrast'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  height: number\r\n}\r\n\r\nconst barWidth = 30\r\n\r\nexport const OscilloscopeInfoBar = ({ height, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      <Line\r\n        points={[\r\n          [-15, height / 2],\r\n          [barWidth, height / 2],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <mesh position={[7.5, height / 2 - 3, 0]}>\r\n        <boxGeometry args={[45, 6, 0.1]} />\r\n\r\n        <meshStandardMaterial color='red' />\r\n      </mesh>\r\n\r\n      {/* <mesh position={[barWidth / 2, height / 2 - 2.6, 0]}>\r\n        <boxGeometry args={[barWidth, 5, 1]} />\r\n\r\n        <meshStandardMaterial color='red' />\r\n      </mesh> */}\r\n\r\n      <Line\r\n        points={[\r\n          [barWidth, height / 2],\r\n          [barWidth, -height / 2],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <Line\r\n        points={[\r\n          [-15, -height / 2],\r\n          [barWidth, -height / 2],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <OscilloscopeInfoBarScaleY position={[2, height / 2 - 9.5, 1]} />\r\n\r\n      <OscilloscopeInfoBarScaleX position={[2, height / 2 - 14, 1]} />\r\n\r\n      <OscilloscopeInfoBarContrast position={[2, height / 2 - 23.5, 1]} />\r\n    </group>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useTranslate } from '@languages'\r\nimport { Line, Text } from '@react-three/drei'\r\nimport { GRID_CELLS_COUNT_IN_QUARTER } from '@constants'\r\nimport Roboto from 'src/assets/fonts/roboto_regular.woff'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\n\r\nconst gridLines = new Array(GRID_CELLS_COUNT_IN_QUARTER * 2).fill(0)\r\n\r\nexport const OscilloscopeWaveformGrid = ({ size }: Props) => {\r\n  const translate = useTranslate('OscilloscopeWaveformSI')\r\n\r\n  const cellSize = size / GRID_CELLS_COUNT_IN_QUARTER / 2\r\n\r\n  const renderLineH = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2, size / 2 - cellSize * i, 0],\r\n        [size / 2, size / 2 - cellSize * i, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={0.4}\r\n      lineWidth={0.4}\r\n      color='red'\r\n    />\r\n  )\r\n  const renderLineV = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2 + cellSize * i, size / 2, 0],\r\n        [-size / 2 + cellSize * i, -size / 2, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={0.4}\r\n      lineWidth={0.4}\r\n      color='red'\r\n    />\r\n  )\r\n\r\n  return (\r\n    <group>\r\n      {gridLines.map(renderLineH)}\r\n\r\n      {gridLines.map(renderLineV)}\r\n\r\n      <Text\r\n        renderOrder={-1}\r\n        fontSize={2.5}\r\n        font={Roboto}\r\n        color='red'\r\n        position={[4, size / 2 - 3, 1]}\r\n      >\r\n        {`U, ${translate('y')}`}\r\n      </Text>\r\n\r\n      <Text\r\n        renderOrder={-1}\r\n        fontSize={2.5}\r\n        font={Roboto}\r\n        color='red'\r\n        position={[size / 2 - 3, -2, 1]}\r\n      >\r\n        {`t, ${translate('x')}`}\r\n      </Text>\r\n    </group>\r\n  )\r\n}\r\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CubicBezierCurve3 } from 'three';\nimport { Line } from './Line.js';\n\nconst CubicBezierLine = /*#__PURE__*/React.forwardRef(function CubicBezierLine({\n  start,\n  end,\n  midA,\n  midB,\n  segments = 20,\n  ...rest\n}, ref) {\n  const points = React.useMemo(() => {\n    const startV = start instanceof Vector3 ? start : new Vector3(...start);\n    const endV = end instanceof Vector3 ? end : new Vector3(...end);\n    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);\n    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);\n    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);\n    return interpolatedV;\n  }, [start, end, midA, midB, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: points\n  }, rest));\n});\n\nexport { CubicBezierLine };\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { CubicBezierLine } from '@react-three/drei'\r\nimport {\r\n  GRID_CELLS_COUNT_IN_QUARTER,\r\n  ENGINE_ROTATION_FREQUENCY_MIN,\r\n} from '@constants'\r\nimport {\r\n  selectModelingVoltageMax,\r\n  selectOscilloscopeScaleY,\r\n  selectOscilloscopeScaleX,\r\n  selectEngineRotationFrequency,\r\n  selectIsOscilloscopeConnected,\r\n} from '@selectors'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\nconst T_MAX = 1 / ENGINE_ROTATION_FREQUENCY_MIN\r\nconst T_MAX_SIZE = T_MAX * GRID_CELLS_COUNT_IN_QUARTER\r\n\r\nexport const OscilloscopeWaveformGraphic = ({ size }: Props) => {\r\n  const isConnected = useSelector(selectIsOscilloscopeConnected)\r\n\r\n  const V = scaleV(\r\n    useSelector(selectModelingVoltageMax),\r\n    useSelector(selectOscilloscopeScaleY),\r\n  )\r\n  const T = scaleT(\r\n    1 / useSelector(selectEngineRotationFrequency),\r\n    useSelector(selectOscilloscopeScaleX),\r\n  )\r\n\r\n  if (!isConnected) return null\r\n\r\n  const TSize = (T / T_MAX_SIZE) * size\r\n  const oscillationsInQuarter = new Array(Math.ceil(size / 2 / TSize)).fill(0)\r\n\r\n  const renderOscillation = (_: any, i: number) => {\r\n    const sign = i % 2 ? -1 : 1\r\n\r\n    return (\r\n      <>\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[i * TSize, 0, 0]}\r\n          midA={[i * TSize + TSize / 2, sign * V, 0]}\r\n          midB={[i * TSize + TSize / 2, sign * V, 0]}\r\n          end={[i * TSize + TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[-i * TSize, 0, 0]}\r\n          midA={[-i * TSize - TSize / 2, -sign * V, 0]}\r\n          midB={[-i * TSize - TSize / 2, -sign * V, 0]}\r\n          end={[-i * TSize - TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <group>{oscillationsInQuarter.map(renderOscillation)}</group>\r\n}\r\n\r\nconst T_SCALE_INIT = 0.25\r\nconst scaleT = (T: number, scale: number) => {\r\n  const k = T_SCALE_INIT / scale\r\n\r\n  return T * k\r\n}\r\n\r\nconst V_SCALE_INIT = 0.12875\r\nconst scaleV = (V: number, scale: number) => {\r\n  const k = V_SCALE_INIT / scale\r\n\r\n  return V * k\r\n}\r\n","import React from 'react'\r\nimport { Line } from '@react-three/drei'\r\nimport { OscilloscopeWaveformGrid } from './OscilloscopeWaveformGrid'\r\nimport { OscilloscopeWaveformGraphic } from './OscilloscopeWaveformGraphic'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  size: number\r\n}\r\n\r\nexport const OscilloscopeWaveform = ({ size, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      {/** Рамка */}\r\n      <Line\r\n        points={[\r\n          [-size / 2, size / 2, 0],\r\n          [size / 2, size / 2, 0],\r\n          [size / 2, -size / 2, 0],\r\n          [-size / 2, -size / 2, 0],\r\n          [-size / 2, size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось Y */}\r\n      <Line\r\n        points={[\r\n          [0, size / 2, 0],\r\n          [0, -size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось X */}\r\n      <Line\r\n        points={[\r\n          [size / 2, 0, 0],\r\n          [-size / 2, 0, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <OscilloscopeWaveformGrid size={size} />\r\n\r\n      <OscilloscopeWaveformGraphic size={size} />\r\n    </group>\r\n  )\r\n}\r\n","import * as THREE from 'three'\r\nimport { store } from 'src/store'\r\nimport React, { useRef } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { selectOscilloscopeContrast } from '@selectors'\r\n\r\ntype Props = {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const OscilloscopeContrastSurface = ({ width, height }: Props) => {\r\n  const materialRef = useRef<THREE.MeshBasicMaterial | null>(null)\r\n\r\n  useFrame(() => {\r\n    if (!materialRef.current) return\r\n\r\n    materialRef.current.opacity =\r\n      1 - selectOscilloscopeContrast(store.getState())\r\n  })\r\n\r\n  return (\r\n    <mesh>\r\n      <boxGeometry args={[width, height, 3]} />\r\n      <meshBasicMaterial ref={materialRef} color='black' transparent />\r\n    </mesh>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { OscilloscopeInfoBar } from './OscilloscopeInfoBar'\r\nimport { OscilloscopeWaveform } from './OscilloscopeWaveform'\r\nimport { OscilloscopeContrastSurface } from './OscilloscopeContrastSurface'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const OscilloscopeDisplay = ({ width, height, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      <mesh>\r\n        <boxGeometry args={[width, height, 1]} />\r\n        <meshBasicMaterial color='red' transparent opacity={0.15} />\r\n      </mesh>\r\n\r\n      <OscilloscopeWaveform size={height - 10} position={[-40, 0, 0]} />\r\n\r\n      <OscilloscopeInfoBar height={height - 10} position={[30, 0, 0]} />\r\n\r\n      <OscilloscopeContrastSurface width={width} height={height} />\r\n    </group>\r\n  )\r\n}\r\n","import * as THREE from 'three'\r\nimport { GLTF } from 'three-stdlib'\r\nimport { useDispatch } from '@hooks'\r\nimport React, { useRef } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useGLTF } from '@react-three/drei'\r\nimport { ThreeEvent, useFrame } from '@react-three/fiber'\r\nimport { TerminalConnectingZone } from '@components'\r\nimport OscilloscopeModelPath from './oscilloscope.glb'\r\nimport {\r\n  setOscilloscopeContrast,\r\n  setOscilloscopeIsPowerSupplied,\r\n} from '@slices'\r\nimport { OscilloscopeDisplay } from './OscilloscopeDisplay'\r\nimport {\r\n  numberBetween,\r\n  setDefaultCursor,\r\n  setPointerCursor,\r\n  setRotationCursor,\r\n} from '@utils'\r\nimport {\r\n  selectOscilloscopeContrast,\r\n  selectOscilloscopeIsPowerSupplied,\r\n} from '@selectors'\r\nimport { store } from 'src/store'\r\nimport {\r\n  OSCILLOSCOPE_CONTRAST_MAX,\r\n  OSCILLOSCOPE_CONTRAST_MIN,\r\n  OSCILLOSCOPE_CONTRAST_STEP,\r\n} from '@constants'\r\n\r\ntype GLTFResult = GLTF & {\r\n  nodes: {\r\n    Cylinder: THREE.Mesh\r\n    Cylinder_1: THREE.Mesh\r\n    power: THREE.Mesh\r\n    Text001: THREE.Mesh\r\n    Text001_1: THREE.Mesh\r\n    Text001_2: THREE.Mesh\r\n    Text001_3: THREE.Mesh\r\n    ['-']: THREE.Mesh\r\n    ['+']: THREE.Mesh\r\n  }\r\n  materials: {\r\n    tabl_background: THREE.MeshStandardMaterial\r\n    Black_line: THREE.MeshStandardMaterial\r\n    power: THREE.MeshStandardMaterial\r\n    Corp: THREE.MeshStandardMaterial\r\n    blue: THREE.MeshStandardMaterial\r\n    metall: THREE.MeshPhysicalMaterial\r\n    very_blue: THREE.MeshStandardMaterial\r\n  }\r\n}\r\n\r\nconst powerBtnZ = 77.13\r\nconst contrastRotation = new THREE.Euler(Math.PI / 2, Math.PI / 2, 0)\r\n\r\nconst Oscilloscope = (props: JSX.IntrinsicElements['group']) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const { nodes, materials } = useGLTF(OscilloscopeModelPath) as GLTFResult\r\n\r\n  const powerBtnRef = useRef<THREE.Mesh>(null)\r\n  const contrastRef = useRef<THREE.Group>(null)\r\n\r\n  const isPowerSupplied = useSelector(selectOscilloscopeIsPowerSupplied)\r\n\r\n  useFrame(() => {\r\n    if (!powerBtnRef.current) return\r\n\r\n    powerBtnRef.current.position.setZ(powerBtnZ - (isPowerSupplied ? 6 : 0))\r\n\r\n    const contrast = selectOscilloscopeContrast(store.getState())\r\n    const angle = Math.PI / 2 - (Math.PI * contrast) / OSCILLOSCOPE_CONTRAST_MAX\r\n\r\n    contrastRotation.set(contrastRotation.x, angle, contrastRotation.z)\r\n\r\n    contrastRef.current?.setRotationFromEuler(contrastRotation)\r\n  })\r\n\r\n  const handlePowerClick = () => {\r\n    dispatch(setOscilloscopeIsPowerSupplied(!isPowerSupplied))\r\n\r\n    if (!powerBtnRef.current) return\r\n    powerBtnRef.current.position.z += isPowerSupplied ? 6 : -6\r\n  }\r\n\r\n  const handleWheel = (e: ThreeEvent<WheelEvent>) => {\r\n    const contrast = selectOscilloscopeContrast(store.getState())\r\n\r\n    const newContrast =\r\n      contrast + Math.sign(-e.deltaY) * OSCILLOSCOPE_CONTRAST_STEP\r\n\r\n    const newRoundedContrast =\r\n      Math.round((newContrast + Number.EPSILON) * 100) / 100\r\n\r\n    store.dispatch(\r\n      setOscilloscopeContrast(\r\n        numberBetween(\r\n          newRoundedContrast,\r\n          OSCILLOSCOPE_CONTRAST_MIN,\r\n          OSCILLOSCOPE_CONTRAST_MAX,\r\n        ),\r\n      ),\r\n    )\r\n  }\r\n\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <group position={[0, -110, 0]}>\r\n        <group\r\n          ref={contrastRef}\r\n          position={[87.01, 34.15, 81.41]}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          scale={[-12.81, -6.02, -12.81]}\r\n          onPointerEnter={setRotationCursor}\r\n          onPointerLeave={setDefaultCursor}\r\n          onWheel={handleWheel}\r\n        >\r\n          <mesh\r\n            geometry={nodes.Cylinder.geometry}\r\n            material={materials.tabl_background}\r\n          />\r\n          <mesh\r\n            geometry={nodes.Cylinder_1.geometry}\r\n            material={materials.Black_line}\r\n          />\r\n        </group>\r\n\r\n        <mesh\r\n          ref={powerBtnRef}\r\n          geometry={nodes.power.geometry}\r\n          material={materials.power}\r\n          position={[-92.84, 32, 77.13]}\r\n          rotation={[0, -Math.PI / 2, 0]}\r\n          scale={[3.92, 5.58, 5.58]}\r\n          onClick={handlePowerClick}\r\n          onPointerOver={setPointerCursor}\r\n          onPointerLeave={setDefaultCursor}\r\n        />\r\n\r\n        <group\r\n          position={[87.01, 13.75, 74.96]}\r\n          rotation={[Math.PI / 2, 0, 0]}\r\n          scale={[6.64, 144.05, 6.64]}\r\n        >\r\n          <mesh\r\n            geometry={nodes.Text001.geometry}\r\n            material={materials.Black_line}\r\n          />\r\n          <mesh geometry={nodes.Text001_1.geometry} material={materials.Corp} />\r\n          <mesh geometry={nodes.Text001_2.geometry} material={materials.blue} />\r\n          <mesh\r\n            geometry={nodes.Text001_3.geometry}\r\n            material={materials.metall}\r\n          />\r\n        </group>\r\n\r\n        <mesh\r\n          geometry={nodes['-'].geometry}\r\n          material={materials.very_blue}\r\n          position={[12.23, 32, 77.13]}\r\n          rotation={[0, -Math.PI / 2, 0]}\r\n          scale={[3.92, 5.58, 5.58]}\r\n        />\r\n\r\n        <mesh\r\n          geometry={nodes['+'].geometry}\r\n          material={materials.very_blue}\r\n          position={[45.04, 32, 77.13]}\r\n          rotation={[0, -Math.PI / 2, 0]}\r\n          scale={[3.92, 5.58, 5.58]}\r\n        />\r\n\r\n        <TerminalConnectingZone\r\n          terminal='Oscilloscope+'\r\n          color='black'\r\n          size={16}\r\n          position={[-28, 32, 83.5]}\r\n        />\r\n\r\n        <TerminalConnectingZone\r\n          terminal='Oscilloscope-'\r\n          color='black'\r\n          size={16}\r\n          position={[-56, 32, 83.5]}\r\n        />\r\n\r\n        <OscilloscopeDisplay\r\n          width={200}\r\n          height={120}\r\n          visible={isPowerSupplied}\r\n          position={[0, 124 / 2 + 54, 74]}\r\n        />\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nexport default Oscilloscope\r\n"],"names":["OscilloscopeInfoBarScaleY","props","ref","useRef","useFrame","current","text","concat","selectOscilloscopeScaleY","store","toFixed","_jsxs","_objectSpread","children","_jsx","Text","renderOrder","anchorX","fontSize","color","font","FiraCode","OscilloscopeInfoBarScaleX","selectOscilloscopeScaleX","OscilloscopeInfoBarContrast","selectOscilloscopeContrast","OscilloscopeInfoBar","_ref","height","_objectWithoutProperties","_excluded","Line","points","lineWidth","position","args","gridLines","Array","GRID_CELLS_COUNT_IN_QUARTER","fill","OscilloscopeWaveformGrid","size","translate","useTranslate","cellSize","map","_","i","dashed","dashSize","Roboto","CubicBezierLine","React","start","end","midA","midB","_ref$segments","segments","rest","startV","Vector3","_construct","_toConsumableArray","endV","midAV","midBV","CubicBezierCurve3","getPoints","_extends","T_MAX_SIZE","ENGINE_ROTATION_FREQUENCY_MIN","OscilloscopeWaveformGraphic","isConnected","useSelector","selectIsOscilloscopeConnected","V","scaleV","selectModelingVoltageMax","T","scaleT","selectEngineRotationFrequency","TSize","oscillationsInQuarter","Math","ceil","sign","_Fragment","scale","OscilloscopeWaveform","OscilloscopeContrastSurface","width","materialRef","opacity","transparent","OscilloscopeDisplay","contrastRotation","THREE","PI","dispatch","useDispatch","useGLTF","OscilloscopeModelPath","nodes","materials","powerBtnRef","contrastRef","isPowerSupplied","selectOscilloscopeIsPowerSupplied","_contrastRef$current","setZ","contrast","angle","OSCILLOSCOPE_CONTRAST_MAX","set","x","z","setRotationFromEuler","dispose","rotation","onPointerEnter","setRotationCursor","onPointerLeave","setDefaultCursor","onWheel","e","newContrast","deltaY","OSCILLOSCOPE_CONTRAST_STEP","newRoundedContrast","round","Number","EPSILON","setOscilloscopeContrast","numberBetween","OSCILLOSCOPE_CONTRAST_MIN","geometry","Cylinder","material","tabl_background","Cylinder_1","Black_line","power","onClick","setOscilloscopeIsPowerSupplied","onPointerOver","setPointerCursor","Text001","Text001_1","Corp","Text001_2","blue","Text001_3","metall","very_blue","TerminalConnectingZone","terminal","visible"],"sourceRoot":""}