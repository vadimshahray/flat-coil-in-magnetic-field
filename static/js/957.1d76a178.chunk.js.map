{"version":3,"file":"static/js/957.1d76a178.chunk.js","mappings":"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","sources":["models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGrid.tsx","../node_modules/@react-three/drei/core/CubicBezierLine.js","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveformGraphic.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeWaveform/OscilloscopeWaveform.tsx","models/Oscilloscope/OscilloscopeDisplay/OscilloscopeDisplay.tsx","models/Oscilloscope/Oscilloscope.tsx"],"sourcesContent":["import React from 'react'\r\nimport { Line } from '@react-three/drei'\r\nimport { GRID_CELLS_COUNT_IN_QUARTER } from '@constants'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\n\r\nconst gridLines = new Array(GRID_CELLS_COUNT_IN_QUARTER * 2).fill(0)\r\n\r\nexport const OscilloscopeWaveformGrid = ({ size }: Props) => {\r\n  const cellSize = size / GRID_CELLS_COUNT_IN_QUARTER / 2\r\n\r\n  const renderLineH = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2, size / 2 - cellSize * i, 0],\r\n        [size / 2, size / 2 - cellSize * i, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={cellSize / 10}\r\n      lineWidth={0.5}\r\n      color='red'\r\n    />\r\n  )\r\n  const renderLineV = (_: any, i: number) => (\r\n    <Line\r\n      key={i}\r\n      points={[\r\n        [-size / 2 + cellSize * i, size / 2, 0],\r\n        [-size / 2 + cellSize * i, -size / 2, 0],\r\n      ]}\r\n      dashed\r\n      dashSize={cellSize / 10}\r\n      lineWidth={0.5}\r\n      color='red'\r\n    />\r\n  )\r\n\r\n  return (\r\n    <group>\r\n      {gridLines.map(renderLineH)}\r\n      {gridLines.map(renderLineV)}\r\n    </group>\r\n  )\r\n}\r\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Vector3, CubicBezierCurve3 } from 'three';\nimport { Line } from './Line.js';\n\nconst CubicBezierLine = /*#__PURE__*/React.forwardRef(function CubicBezierLine({\n  start,\n  end,\n  midA,\n  midB,\n  segments = 20,\n  ...rest\n}, ref) {\n  const points = React.useMemo(() => {\n    const startV = start instanceof Vector3 ? start : new Vector3(...start);\n    const endV = end instanceof Vector3 ? end : new Vector3(...end);\n    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);\n    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);\n    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);\n    return interpolatedV;\n  }, [start, end, midA, midB, segments]);\n  return /*#__PURE__*/React.createElement(Line, _extends({\n    ref: ref,\n    points: points\n  }, rest));\n});\n\nexport { CubicBezierLine };\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { CubicBezierLine } from '@react-three/drei'\r\nimport {\r\n  GRID_CELLS_COUNT_IN_QUARTER,\r\n  ENGINE_ROTATION_FREQUENCY_MIN,\r\n} from '@constants'\r\nimport {\r\n  selectModelingVoltageMax,\r\n  selectEngineRotationFrequency,\r\n} from '@selectors'\r\n\r\ntype Props = {\r\n  size: number\r\n}\r\nconst T_MAX = 1 / ENGINE_ROTATION_FREQUENCY_MIN\r\n\r\nconst T_MAX_SIZE = T_MAX * GRID_CELLS_COUNT_IN_QUARTER\r\n\r\nexport const OscilloscopeWaveformGraphic = ({ size }: Props) => {\r\n  const A = useSelector(selectModelingVoltageMax)\r\n\r\n  const T = 1 / useSelector(selectEngineRotationFrequency)\r\n\r\n  const TSize = (T / T_MAX_SIZE) * size\r\n  const oscillationsInQuarter = new Array(Math.round(size / 2 / TSize)).fill(0)\r\n\r\n  const renderOscillation = (_: any, i: number) => {\r\n    const sign = i % 2 ? -1 : 1\r\n\r\n    return (\r\n      <>\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[i * TSize, 0, 0]}\r\n          midA={[i * TSize + TSize / 2, sign * A, 0]}\r\n          midB={[i * TSize + TSize / 2, sign * A, 0]}\r\n          end={[i * TSize + TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n\r\n        <CubicBezierLine\r\n          key={i}\r\n          start={[-i * TSize, 0, 0]}\r\n          midA={[-i * TSize - TSize / 2, -sign * A, 0]}\r\n          midB={[-i * TSize - TSize / 2, -sign * A, 0]}\r\n          end={[-i * TSize - TSize, 0, 0]}\r\n          color='red'\r\n          lineWidth={1}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n\r\n  return <group>{oscillationsInQuarter.map(renderOscillation)}</group>\r\n}\r\n","import React from 'react'\r\nimport { Line } from '@react-three/drei'\r\nimport { OscilloscopeWaveformGrid } from './OscilloscopeWaveformGrid'\r\nimport { OscilloscopeWaveformGraphic } from './OscilloscopeWaveformGraphic'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  size: number\r\n}\r\n\r\nexport const OscilloscopeWaveform = ({ size, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      {/** Рамка */}\r\n      <Line\r\n        points={[\r\n          [-size / 2, size / 2, 0],\r\n          [size / 2, size / 2, 0],\r\n          [size / 2, -size / 2, 0],\r\n          [-size / 2, -size / 2, 0],\r\n          [-size / 2, size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось Y */}\r\n      <Line\r\n        points={[\r\n          [0, size / 2, 0],\r\n          [0, -size / 2, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      {/** Ось X */}\r\n      <Line\r\n        points={[\r\n          [size / 2, 0, 0],\r\n          [-size / 2, 0, 0],\r\n        ]}\r\n        lineWidth={0.5}\r\n        color='red'\r\n      />\r\n\r\n      <OscilloscopeWaveformGrid size={size} />\r\n\r\n      <OscilloscopeWaveformGraphic size={size} />\r\n    </group>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { OscilloscopeWaveform } from './OscilloscopeWaveform'\r\n\r\ntype Props = JSX.IntrinsicElements['group'] & {\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const OscilloscopeDisplay = ({ width, height, ...props }: Props) => {\r\n  return (\r\n    <group {...props}>\r\n      <mesh>\r\n        <boxGeometry args={[width, height, 1]} />\r\n        <meshBasicMaterial color='red' transparent opacity={0.1} />\r\n      </mesh>\r\n\r\n      <OscilloscopeWaveform size={height - 10} />\r\n    </group>\r\n  )\r\n}\r\n","import React from 'react'\nimport * as THREE from 'three'\nimport { GLTF } from 'three-stdlib'\nimport { useGLTF } from '@react-three/drei'\nimport OscilloscopeModelPath from './oscilloscope.glb'\nimport { OscilloscopeDisplay } from './OscilloscopeDisplay'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    Cylinder: THREE.Mesh\n    Cylinder_1: THREE.Mesh\n    power: THREE.Mesh\n    Text001: THREE.Mesh\n    Text001_1: THREE.Mesh\n    Text001_2: THREE.Mesh\n    Text001_3: THREE.Mesh\n    ['-']: THREE.Mesh\n    ['+']: THREE.Mesh\n  }\n  materials: {\n    tabl_background: THREE.MeshStandardMaterial\n    Black_line: THREE.MeshStandardMaterial\n    power: THREE.MeshStandardMaterial\n    Corp: THREE.MeshStandardMaterial\n    blue: THREE.MeshStandardMaterial\n    metall: THREE.MeshPhysicalMaterial\n    very_blue: THREE.MeshStandardMaterial\n  }\n}\n\nconst Oscilloscope = (props: JSX.IntrinsicElements['group']) => {\n  const { nodes, materials } = useGLTF(OscilloscopeModelPath) as GLTFResult\n\n  return (\n    <group {...props} dispose={null}>\n      <group\n        position={[87.01, 34.15, 81.41]}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[-12.81, -6.02, -12.81]}\n      >\n        <mesh\n          geometry={nodes.Cylinder.geometry}\n          material={materials.tabl_background}\n        />\n        <mesh\n          geometry={nodes.Cylinder_1.geometry}\n          material={materials.Black_line}\n        />\n      </group>\n      <mesh\n        geometry={nodes.power.geometry}\n        material={materials.power}\n        position={[-92.84, 32, 77.13]}\n        rotation={[0, -Math.PI / 2, 0]}\n        scale={[3.92, 5.58, 5.58]}\n      />\n      <group\n        position={[87.01, 13.75, 74.96]}\n        rotation={[Math.PI / 2, 0, 0]}\n        scale={[6.64, 144.05, 6.64]}\n      >\n        <mesh\n          geometry={nodes.Text001.geometry}\n          material={materials.Black_line}\n        />\n        <mesh geometry={nodes.Text001_1.geometry} material={materials.Corp} />\n        <mesh geometry={nodes.Text001_2.geometry} material={materials.blue} />\n        <mesh geometry={nodes.Text001_3.geometry} material={materials.metall} />\n      </group>\n      <mesh\n        geometry={nodes['-'].geometry}\n        material={materials.very_blue}\n        position={[12.23, 32, 77.13]}\n        rotation={[0, -Math.PI / 2, 0]}\n        scale={[3.92, 5.58, 5.58]}\n      />\n      <mesh\n        geometry={nodes['+'].geometry}\n        material={materials.very_blue}\n        position={[45.04, 32, 77.13]}\n        rotation={[0, -Math.PI / 2, 0]}\n        scale={[3.92, 5.58, 5.58]}\n      />\n\n      <OscilloscopeDisplay\n        width={200}\n        height={124}\n        position={[0, 124 / 2 + 52, 74]}\n      />\n    </group>\n  )\n}\n\nexport default Oscilloscope\n"],"names":["gridLines","Array","GRID_CELLS_COUNT_IN_QUARTER","fill","OscilloscopeWaveformGrid","_ref","size","cellSize","_jsxs","children","map","_","i","_jsx","Line","points","dashed","dashSize","lineWidth","color","CubicBezierLine","React","ref","start","end","midA","midB","_ref$segments","segments","rest","_objectWithoutProperties","_excluded","startV","Vector3","_construct","_toConsumableArray","endV","midAV","midBV","CubicBezierCurve3","getPoints","_extends","T_MAX_SIZE","ENGINE_ROTATION_FREQUENCY_MIN","OscilloscopeWaveformGraphic","A","useSelector","selectModelingVoltageMax","TSize","selectEngineRotationFrequency","oscillationsInQuarter","Math","round","sign","_Fragment","OscilloscopeWaveform","props","_objectSpread","OscilloscopeDisplay","width","height","args","transparent","opacity","useGLTF","OscilloscopeModelPath","nodes","materials","dispose","position","rotation","PI","scale","geometry","Cylinder","material","tabl_background","Cylinder_1","Black_line","power","Text001","Text001_1","Corp","Text001_2","blue","Text001_3","metall","very_blue"],"sourceRoot":""}