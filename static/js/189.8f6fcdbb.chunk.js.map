{"version":3,"file":"static/js/189.8f6fcdbb.chunk.js","mappings":"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","sources":["models/Engine/Engine.tsx"],"sourcesContent":["import * as THREE from 'three'\r\nimport { store } from 'src/store'\r\nimport { GLTF } from 'three-stdlib'\r\nimport React, { useRef } from 'react'\r\nimport EngineModelPath from './engine.glb'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { Text, useGLTF } from '@react-three/drei'\r\nimport FiraCode from 'src/assets/fonts/firacode_light.woff'\r\nimport { setDefaultCursor, setPointerCursor } from '@utils'\r\nimport { setEngineIsPowerSupplied, setEngineRotationFrequency } from '@slices'\r\nimport {\r\n  selectEngineIsPowerSupplied,\r\n  selectEngineRotationFrequency,\r\n} from '@selectors'\r\nimport {\r\n  ENGINE_ROTATION_FREQUENCY_MAX,\r\n  ENGINE_ROTATION_FREQUENCY_MIN,\r\n  ENGINE_ROTATION_FREQUENCY_STEP,\r\n} from '@constants'\r\n\r\ntype GLTFResult = GLTF & {\r\n  nodes: {\r\n    Cylinder_1: THREE.Mesh\r\n    Cylinder_2: THREE.Mesh\r\n    Cylinder_3: THREE.Mesh\r\n    green_button_1: THREE.Mesh\r\n    green_button_2: THREE.Mesh\r\n    button_on: THREE.Mesh\r\n  }\r\n  materials: {\r\n    metallic: THREE.MeshPhysicalMaterial\r\n    black: THREE.MeshPhysicalMaterial\r\n    grey_tabl: THREE.MeshStandardMaterial\r\n    grey_button: THREE.MeshStandardMaterial\r\n    red: THREE.MeshStandardMaterial\r\n  }\r\n}\r\n\r\nconst WoodBlock = React.lazy(() => import('src/models/WoodBlock'))\r\n\r\nconst powerBtnInitX = 266.74\r\n\r\nconst Engine = (props: JSX.IntrinsicElements['group']) => {\r\n  const { nodes, materials } = useGLTF(EngineModelPath) as GLTFResult\r\n\r\n  const textRef = useRef<Text & { text: string }>()\r\n  const textSIRef = useRef<THREE.Mesh>()\r\n  const powerBtnRef = useRef<THREE.Mesh>(null)\r\n\r\n  useFrame(() => {\r\n    const isPowerSupplied = selectEngineIsPowerSupplied(store.getState())\r\n\r\n    if (textRef.current) {\r\n      const frequency = selectEngineRotationFrequency(store.getState())\r\n      textRef.current.text = isPowerSupplied\r\n        ? (frequency < 10 ? ' ' : '') + frequency.toFixed(1)\r\n        : ''\r\n    }\r\n\r\n    if (textSIRef.current) {\r\n      textSIRef.current.visible = isPowerSupplied\r\n    }\r\n\r\n    if (powerBtnRef.current) {\r\n      powerBtnRef.current.position.setX(\r\n        isPowerSupplied ? powerBtnInitX - 10 : powerBtnInitX,\r\n      )\r\n    }\r\n  })\r\n\r\n  const handlePowerClick = () => {\r\n    const isPowerSupplied = selectEngineIsPowerSupplied(store.getState())\r\n\r\n    store.dispatch(setEngineIsPowerSupplied(!isPowerSupplied))\r\n  }\r\n\r\n  const handleFrequencyUpClick = () => {\r\n    const isPowerSupplied = selectEngineIsPowerSupplied(store.getState())\r\n    if (!isPowerSupplied) return\r\n\r\n    const frequency = selectEngineRotationFrequency(store.getState())\r\n\r\n    store.dispatch(\r\n      setEngineRotationFrequency(\r\n        Math.min(\r\n          ENGINE_ROTATION_FREQUENCY_MAX,\r\n          frequency + ENGINE_ROTATION_FREQUENCY_STEP,\r\n        ),\r\n      ),\r\n    )\r\n  }\r\n\r\n  const handleFrequencyDownClick = () => {\r\n    const isPowerSupplied = selectEngineIsPowerSupplied(store.getState())\r\n    if (!isPowerSupplied) return\r\n\r\n    const frequency = selectEngineRotationFrequency(store.getState())\r\n\r\n    store.dispatch(\r\n      setEngineRotationFrequency(\r\n        Math.max(\r\n          ENGINE_ROTATION_FREQUENCY_MIN,\r\n          frequency - ENGINE_ROTATION_FREQUENCY_STEP,\r\n        ),\r\n      ),\r\n    )\r\n  }\r\n\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <group position={[0, -210, 0]}>\r\n        <group position={[-10, 107, 3]}>\r\n          <group scale={0.4} position={[0, 4, 0]}>\r\n            <group\r\n              position={[49.94, 220.64, -22.82]}\r\n              rotation={[-Math.PI, 0, -Math.PI / 2]}\r\n              scale={[191.14, 328.3, 191.14]}\r\n            >\r\n              <mesh\r\n                geometry={nodes.Cylinder_1.geometry}\r\n                material={materials.metallic}\r\n              />\r\n              <mesh\r\n                geometry={nodes.Cylinder_2.geometry}\r\n                material={materials.black}\r\n              />\r\n              <mesh geometry={nodes.Cylinder_3.geometry}>\r\n                <meshStandardMaterial color='black' />\r\n              </mesh>\r\n            </group>\r\n            <mesh\r\n              geometry={nodes.green_button_1.geometry}\r\n              material={materials.grey_button}\r\n              position={[215.46, 274.68, 295.22]}\r\n              rotation={[0, -Math.PI / 2, 0]}\r\n              scale={[3.61, 19.76, 19.78]}\r\n              onClick={handleFrequencyUpClick}\r\n              onPointerEnter={setPointerCursor}\r\n              onPointerLeave={setDefaultCursor}\r\n            />\r\n            <mesh\r\n              geometry={nodes.green_button_2.geometry}\r\n              material={materials.grey_button}\r\n              position={[215.46, 205.34, 295.22]}\r\n              rotation={[-Math.PI, -Math.PI / 2, 0]}\r\n              scale={[3.61, 19.76, 19.78]}\r\n              onClick={handleFrequencyDownClick}\r\n              onPointerEnter={setPointerCursor}\r\n              onPointerLeave={setDefaultCursor}\r\n            />\r\n            <mesh\r\n              ref={powerBtnRef}\r\n              geometry={nodes.button_on.geometry}\r\n              material={materials.red}\r\n              position={[266.74, 298.21, 250.74]}\r\n              rotation={[Math.PI / 2, 0, Math.PI / 2]}\r\n              scale={[22.49, 10.95, 15.01]}\r\n              onClick={handlePowerClick}\r\n              onPointerEnter={setPointerCursor}\r\n              onPointerLeave={setDefaultCursor}\r\n            />\r\n          </group>\r\n\r\n          <group scale={[0.7, 1, 1]} position={[-2, 98, 118]}>\r\n            <Text ref={textRef} fontSize={47} color='red' font={FiraCode}>\r\n              {' '}\r\n            </Text>\r\n\r\n            <Text\r\n              ref={textSIRef}\r\n              fontSize={33}\r\n              color='red'\r\n              position={[76, -4, 0]}\r\n              font={FiraCode}\r\n            >\r\n              Hz\r\n            </Text>\r\n          </group>\r\n        </group>\r\n\r\n        <WoodBlock args={[280, 107, 220]} position={[8, 52, 0]} />\r\n      </group>\r\n    </group>\r\n  )\r\n}\r\n\r\nexport default Engine\r\n"],"names":["WoodBlock","React","powerBtnInitX","props","_ref","useGLTF","EngineModelPath","nodes","materials","textRef","useRef","textSIRef","powerBtnRef","useFrame","isPowerSupplied","selectEngineIsPowerSupplied","store","current","frequency","selectEngineRotationFrequency","text","toFixed","visible","position","setX","_jsx","_objectSpread","dispose","children","_jsxs","scale","rotation","Math","PI","geometry","Cylinder_1","material","metallic","Cylinder_2","black","Cylinder_3","color","green_button_1","grey_button","onClick","setEngineRotationFrequency","min","ENGINE_ROTATION_FREQUENCY_MAX","ENGINE_ROTATION_FREQUENCY_STEP","onPointerEnter","setPointerCursor","onPointerLeave","setDefaultCursor","green_button_2","max","ENGINE_ROTATION_FREQUENCY_MIN","ref","button_on","red","setEngineIsPowerSupplied","Text","fontSize","font","FiraCode","args"],"sourceRoot":""}