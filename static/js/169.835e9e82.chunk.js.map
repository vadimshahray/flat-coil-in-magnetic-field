{"version":3,"file":"static/js/169.835e9e82.chunk.js","mappings":"qQAmDA,EApB0B,SAACA,GACzB,IAAAC,GAA6BC,EAAAA,EAAAA,GAAQC,GAA7BC,EAAKH,EAALG,MAAOC,EAASJ,EAATI,UAEf,OACEC,EAAAA,EAAAA,KAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWP,GAAK,IAAEQ,QAAS,KAAMC,MAAO,EAAGC,SAAU,CAAC,GAAIC,KAAKC,GAAK,EAAG,GAAGC,UACxEC,EAAAA,EAAAA,MAAA,SAAOL,MAAO,CAAC,IAAM,IAAM,KAAMI,SAAA,EAC/BP,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMY,UAAUD,SAAUE,SAAUZ,EAAUa,UAC9DZ,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMe,UAAUJ,SAAUE,SAAUZ,EAAUe,UAC9Dd,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMiB,UAAUN,SAAUE,SAAUZ,EAAUiB,SAC9DhB,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMmB,UAAUR,SAAUE,SAAUZ,EAAUmB,SAC9DlB,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMqB,UAAUV,SAAUE,SAAUZ,EAAUqB,UAC9DpB,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMuB,UAAUZ,SAAUE,SAAUZ,EAAUuB,OAC9DtB,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAMyB,UAAUd,SAAUE,SAAUZ,EAAUyB,QAC9DxB,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAM2B,UAAUhB,SAAUE,SAAUZ,EAAU2B,UAC9D1B,EAAAA,EAAAA,KAAA,QAAMS,SAAUX,EAAM6B,UAAUlB,SAAUE,SAAUZ,EAAU6B,aAItE,C","sources":["models/AmperageGenerator/AmperageGenerator.tsx"],"sourcesContent":["import React from 'react'\nimport * as THREE from 'three'\nimport { GLTF } from 'three-stdlib'\nimport { useGLTF } from '@react-three/drei'\nimport AmperageGeneratorModelPath from './amperageGenerator.glb'\n\ntype GLTFResult = GLTF & {\n  nodes: {\n    counter_1: THREE.Mesh\n    counter_2: THREE.Mesh\n    counter_3: THREE.Mesh\n    counter_4: THREE.Mesh\n    counter_5: THREE.Mesh\n    counter_6: THREE.Mesh\n    counter_7: THREE.Mesh\n    counter_8: THREE.Mesh\n    counter_9: THREE.Mesh\n  }\n  materials: {\n    grey_3: THREE.MeshStandardMaterial\n    grey_2: THREE.MeshStandardMaterial\n    black: THREE.MeshStandardMaterial\n    white: THREE.MeshStandardMaterial\n    grey_4: THREE.MeshStandardMaterial\n    red: THREE.MeshStandardMaterial\n    grey: THREE.MeshStandardMaterial\n    yellow: THREE.MeshStandardMaterial\n    green: THREE.MeshStandardMaterial\n  }\n}\n\nconst AmperageGenerator = (props: JSX.IntrinsicElements['group']) => {\n  const { nodes, materials } = useGLTF(AmperageGeneratorModelPath) as GLTFResult\n\n  return (\n    <group {...props} dispose={null} scale={3} rotation={[0, -Math.PI / 2, 0]}>\n      <group scale={[0.57, 0.24, 0.48]}>\n        <mesh geometry={nodes.counter_1.geometry} material={materials.grey_3} />\n        <mesh geometry={nodes.counter_2.geometry} material={materials.grey_2} />\n        <mesh geometry={nodes.counter_3.geometry} material={materials.black} />\n        <mesh geometry={nodes.counter_4.geometry} material={materials.white} />\n        <mesh geometry={nodes.counter_5.geometry} material={materials.grey_4} />\n        <mesh geometry={nodes.counter_6.geometry} material={materials.red} />\n        <mesh geometry={nodes.counter_7.geometry} material={materials.grey} />\n        <mesh geometry={nodes.counter_8.geometry} material={materials.yellow} />\n        <mesh geometry={nodes.counter_9.geometry} material={materials.green} />\n      </group>\n    </group>\n  )\n}\n\nexport default AmperageGenerator\n"],"names":["props","_ref","useGLTF","AmperageGeneratorModelPath","nodes","materials","_jsx","_objectSpread","dispose","scale","rotation","Math","PI","children","_jsxs","geometry","counter_1","material","grey_3","counter_2","grey_2","counter_3","black","counter_4","white","counter_5","grey_4","counter_6","red","counter_7","grey","counter_8","yellow","counter_9","green"],"sourceRoot":""}