{"version":3,"file":"static/js/43.618013a3.chunk.js","mappings":"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","sources":["models/CurrentSource/CurrentSource.tsx"],"sourcesContent":["import * as THREE from 'three'\r\nimport { store } from 'src/store'\r\nimport { GLTF } from 'three-stdlib'\r\nimport React, { useRef } from 'react'\r\nimport { Text, useGLTF } from '@react-three/drei'\r\nimport { TerminalConnectingZone } from '@components'\r\nimport CurrentSourceModelPath from './currentSource.glb'\r\nimport { useFrame, ThreeEvent } from '@react-three/fiber'\r\nimport FiraCode from 'src/assets/fonts/firacode_light.woff'\r\nimport {\r\n  setCurrentSourceAmperage,\r\n  setCurrentSourceIsPowerSupplied,\r\n} from '@slices'\r\nimport {\r\n  selectCurrentSourceAmperage,\r\n  selectCurrentSourceIsPowerSupplied,\r\n} from '@selectors'\r\nimport {\r\n  CURRENT_SOURCE_AMPERAGE_MAX,\r\n  CURRENT_SOURCE_AMPERAGE_MIN,\r\n  CURRENT_SOURCE_AMPERAGE_STEP,\r\n} from '@constants'\r\nimport {\r\n  numberBetween,\r\n  setDefaultCursor,\r\n  setPointerCursor,\r\n  setRotationCursor,\r\n  addInsignificantZeros,\r\n} from '@utils'\r\n\r\ntype GLTFResult = GLTF & {\r\n  nodes: {\r\n    Cylinder002: THREE.Mesh\r\n    Cylinder002_1: THREE.Mesh\r\n    power: THREE.Mesh\r\n    Text001: THREE.Mesh\r\n    Text001_1: THREE.Mesh\r\n    Text001_2: THREE.Mesh\r\n    Text001_3: THREE.Mesh\r\n    Text001_4: THREE.Mesh\r\n    Text001_5: THREE.Mesh\r\n  }\r\n  materials: {\r\n    tabl_background: THREE.MeshStandardMaterial\r\n    Black_line: THREE.MeshStandardMaterial\r\n    power: THREE.MeshStandardMaterial\r\n    metall: THREE.MeshPhysicalMaterial\r\n    blue: THREE.MeshStandardMaterial\r\n    grey: THREE.MeshStandardMaterial\r\n    black_line: THREE.MeshStandardMaterial\r\n    black: THREE.MeshStandardMaterial\r\n  }\r\n}\r\n\r\nconst powerBtnPositionZ = 103.5\r\n\r\nconst amperageSwitchRotation = new THREE.Euler(Math.PI / 2, Math.PI / 2, 0)\r\n\r\nconst CurrentSource = (props: JSX.IntrinsicElements['group']) => {\r\n  const { nodes, materials } = useGLTF(CurrentSourceModelPath) as GLTFResult\r\n\r\n  const textRef = useRef<Text & { text: string }>()\r\n  const textSIRef = useRef<THREE.Mesh>()\r\n  const powerBtnRef = useRef<THREE.Mesh>(null)\r\n  const amperageSwitchRef = useRef<THREE.Group>(null)\r\n\r\n  useFrame(() => {\r\n    const amperage = selectCurrentSourceAmperage(store.getState())\r\n    const isPowerSupplied = selectCurrentSourceIsPowerSupplied(store.getState())\r\n\r\n    if (textRef.current) {\r\n      textRef.current.text = isPowerSupplied\r\n        ? addInsignificantZeros(amperage.toFixed(2), 1)\r\n        : ''\r\n    }\r\n\r\n    if (textSIRef.current) {\r\n      textSIRef.current.visible = isPowerSupplied\r\n    }\r\n\r\n    powerBtnRef.current?.position?.setZ(\r\n      isPowerSupplied ? powerBtnPositionZ - 6 : powerBtnPositionZ,\r\n    )\r\n\r\n    const angle =\r\n      Math.PI / 2 - (Math.PI * amperage) / CURRENT_SOURCE_AMPERAGE_MAX\r\n\r\n    amperageSwitchRotation.set(\r\n      amperageSwitchRotation.x,\r\n      angle,\r\n      amperageSwitchRotation.z,\r\n    )\r\n\r\n    amperageSwitchRef.current?.setRotationFromEuler(amperageSwitchRotation)\r\n  })\r\n\r\n  const handlePowerClick = () => {\r\n    const isPowerSupplied = selectCurrentSourceIsPowerSupplied(store.getState())\r\n\r\n    store.dispatch(setCurrentSourceIsPowerSupplied(!isPowerSupplied))\r\n  }\r\n\r\n  const handleWheel = (e: ThreeEvent<WheelEvent>) => {\r\n    const amperage = selectCurrentSourceAmperage(store.getState())\r\n\r\n    const newAmperage =\r\n      amperage + Math.sign(-e.deltaY) * CURRENT_SOURCE_AMPERAGE_STEP * 3\r\n    const newRoundedAmperage =\r\n      Math.round((newAmperage + Number.EPSILON) * 100) / 100\r\n\r\n    store.dispatch(\r\n      setCurrentSourceAmperage(\r\n        numberBetween(\r\n          newRoundedAmperage,\r\n          CURRENT_SOURCE_AMPERAGE_MIN,\r\n          CURRENT_SOURCE_AMPERAGE_MAX,\r\n        ),\r\n      ),\r\n    )\r\n  }\r\n\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <group\r\n        ref={amperageSwitchRef}\r\n        position={[17.3, 0.85, 105.19]}\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        scale={[-9.6, -4.51, -9.6]}\r\n        onPointerEnter={setRotationCursor}\r\n        onPointerLeave={setDefaultCursor}\r\n        onWheel={handleWheel}\r\n      >\r\n        <mesh\r\n          geometry={nodes.Cylinder002.geometry}\r\n          material={materials.tabl_background}\r\n        />\r\n        <mesh\r\n          geometry={nodes.Cylinder002_1.geometry}\r\n          material={materials.Black_line}\r\n        />\r\n      </group>\r\n      <mesh\r\n        ref={powerBtnRef}\r\n        geometry={nodes.power.geometry}\r\n        material={materials.power}\r\n        position={[82.59, 0.85, 102.85]}\r\n        rotation={[0, -Math.PI / 2, 0]}\r\n        scale={[3.92, 5.58, 5.58]}\r\n        onClick={handlePowerClick}\r\n        onPointerEnter={setPointerCursor}\r\n        onPointerLeave={setDefaultCursor}\r\n      />\r\n      <group\r\n        position={[14.47, -0.64, 74.87]}\r\n        rotation={[Math.PI / 2, 0, 0]}\r\n        scale={[5.29, 107.72, 6.64]}\r\n      >\r\n        <mesh\r\n          geometry={nodes.Text001.geometry}\r\n          material={materials.Black_line}\r\n        />\r\n        <mesh geometry={nodes.Text001_1.geometry} material={materials.metall} />\r\n        <mesh geometry={nodes.Text001_2.geometry} material={materials.blue} />\r\n        <mesh geometry={nodes.Text001_3.geometry} material={materials.grey} />\r\n        <mesh\r\n          geometry={nodes.Text001_4.geometry}\r\n          material={materials.black_line}\r\n        />\r\n        <mesh geometry={nodes.Text001_5.geometry} material={materials.black} />\r\n      </group>\r\n\r\n      <group scale={[0.7, 1, 1]} position={[-41.5, -4, 102]}>\r\n        <Text\r\n          ref={textRef}\r\n          fontSize={34}\r\n          color='red'\r\n          position={[-3, 0, 0]}\r\n          font={FiraCode}\r\n        >\r\n          {' '}\r\n        </Text>\r\n\r\n        <Text\r\n          ref={textSIRef}\r\n          fontSize={24}\r\n          color='red'\r\n          position={[45, -3, 0]}\r\n          font={FiraCode}\r\n        >\r\n          A\r\n        </Text>\r\n      </group>\r\n\r\n      <TerminalConnectingZone\r\n        terminal='CurrentSource+'\r\n        color='#832D2E'\r\n        size={16}\r\n        position={[63, 0, 108]}\r\n      />\r\n\r\n      <TerminalConnectingZone\r\n        terminal='CurrentSource-'\r\n        color='#4C4C8A'\r\n        size={16}\r\n        position={[42, 0, 108]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nexport default CurrentSource\r\n"],"names":["amperageSwitchRotation","THREE","Math","PI","props","_ref","useGLTF","CurrentSourceModelPath","nodes","materials","textRef","useRef","textSIRef","powerBtnRef","amperageSwitchRef","useFrame","_powerBtnRef$current","_powerBtnRef$current$","_amperageSwitchRef$cu","amperage","selectCurrentSourceAmperage","store","isPowerSupplied","selectCurrentSourceIsPowerSupplied","current","text","addInsignificantZeros","toFixed","visible","position","setZ","powerBtnPositionZ","angle","CURRENT_SOURCE_AMPERAGE_MAX","set","x","z","setRotationFromEuler","_jsxs","_objectSpread","dispose","children","ref","rotation","scale","onPointerEnter","setRotationCursor","onPointerLeave","setDefaultCursor","onWheel","e","newAmperage","sign","deltaY","CURRENT_SOURCE_AMPERAGE_STEP","newRoundedAmperage","round","Number","EPSILON","setCurrentSourceAmperage","numberBetween","CURRENT_SOURCE_AMPERAGE_MIN","_jsx","geometry","Cylinder002","material","tabl_background","Cylinder002_1","Black_line","power","onClick","setCurrentSourceIsPowerSupplied","setPointerCursor","Text001","Text001_1","metall","Text001_2","blue","Text001_3","grey","Text001_4","black_line","Text001_5","black","Text","fontSize","color","font","FiraCode","TerminalConnectingZone","terminal","size"],"sourceRoot":""}